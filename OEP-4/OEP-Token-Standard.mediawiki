<pre>
  OEP: 4
  Title: Token Standard
  Author: luodanwg <luodan.wg@gmail.com>, tanyuan <tanyuan666@gmail.com>, zhoupw <zhoupw@gmail.com>
  Type: Standard
  Status: Draft
  Created: 2018-07-03
</pre>

==Abstract==

The OEP-4 Proposal is a standard interface for tokens, this standard allows for the implementation of a standard API for tokens within smart contracts.

==Motivation==

A standard token interface unifies all of tokens, allows token on ONT to be convenient used by other applications.

==Specification==

===Methods===

====name====

<pre>
public static string name()
</pre>

Returns the name of the token - e.g. "MyToken".

====symbol====

<pre>
public static string symbol()
</pre>

Returns a short string symbol of the token - e.g. <code>"MYT"</code>.

This symbol SHOULD be short (3-8 characters is recommended), with no whitespace characters or new-lines and SHOULD be limited to the uppercase latin alphabet (i.e. the 26 letters used in English).

====decimals====

<pre>
public static byte decimals()
</pre>

Returns the number of decimals used by the token - e.g. <code>8</code>, means to divide the token amount by <code>100,000,000</code> to get its user representation.


====balanceOf====

<pre>
public static BigInteger balanceOf(byte[] address)
</pre>

Returns the token balance of the <code>address</code>.

The parameter <code>address</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

====transfer====

<pre>
public static bool transfer(byte[] from, byte[] to, BigInteger amount)
</pre>

Transfers an <code>amount</code> of tokens from the <code>from</code> account to the <code>to</code> account.
The parameters <code>from</code> and <code>to</code> SHOULD be 20-byte address. If not, this method SHOULD <code>throw</code> an exception.
The parameter <code>amount</code> MUST be greater than <code>0</code>. If not, this method SHOULD <code>throw</code> an exception.
Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.

====approve====
<pre>
public static bool approve(byte[] owner, byte[] spender, BigInteger amount)
</pre>

The approve allows <code>spender</code> to withdraw from <code>owner</code> account multiple times, up to the value <code>amount</code>.If this function is called again it overwrites the current allowance with value.
The parameters <code>owner</code>and <code>spender</code> SHOULD be 20-byte addresses. If not, this method SHOULD <code>throw</code> an exception.

====transferFrom====
<pre>
public static bool transferFrom(byte[] sender, byte[] from, byte[] to, BigInteger amount)
</pre>

The transferFrom method is used for a withdraw workflow, allowing <code>sender</code> to withdraw <code>amount</code> of token from <code>from</code> account  to <code>to</code> account.
The parameters <code>sender</code> <code>from</code> and <code>to</code> SHOULD be 20-byte addresses. If not, this method SHOULD <code>throw</code> an exception.Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.

====allowance====

<pre>
public static BigInteger allowance(byte[] owner, byte[] spender)
</pre>
Returns the amount which <code>spender</code> is still allowed to withdraw from <code>owner</code>

===Events===

====transfer====

<pre>
public static event transfer(byte[] from, byte[] to, BigInteger amount)
</pre>
MUST trigger when tokens are transferred, including zero value transfers.

A token contract which creates new tokens MUST trigger a <code>transfer</code> event with the <code>from</code> address set to <code>null</code> when tokens are created.

A token contract which burns tokens MUST trigger a <code>transfer</code> event with the <code>to</code> address set to <code>null</code> when tokens are burned.

====approval====
<pre>
public static event approval(byte[] from, byte[] to, BigInteger amount)
</pre>
MUST trigger on any successful call to approve.

===Implementation===
====Example implementations are available at====
OEP-4 Template: